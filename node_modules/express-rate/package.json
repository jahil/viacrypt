{
  "name": "express-rate",
  "description": "Rate monitoring and limiting for express.js apps.",
  "version": "0.0.1",
  "author": {
    "name": "Ilya Volodarsky",
    "email": "ilya@segment.io"
  },
  "keywords": [
    "rate",
    "monitor",
    "limit",
    "monitoring",
    "performance"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:ClassMetric/express-rate.git"
  },
  "main": "./index.js",
  "dependencies": {
    "redis": ">= 0.0.1"
  },
  "devDependencies": {
    "connect": "1.4.x"
  },
  "engines": {
    "node": ">= 0.1.98"
  },
  "readme": "\n# express-rate\n\nexpress-rate is a express.js route specific middleware that monitors the rate at which specific routes get requested and allows you to limit a specific requester. This can be a basic prevention of DOS attacks, or simply used as a Twitter-like rate-limiter on your API. Comes with support for an in memory store, and a Redis store backed by [node_redis](http://github.com/mranney/node_redis).\n\nThis is an alpha release. \n\n## Installation\n\n\t  $ npm install express-rate\n\nNote: this module requires redis > 2.1.3 because of changes in the behavior of the [expire](http://redis.io/topics/expire) action.\n\n\n##### Options:\n\n- *handler*\n\n```js\nnew rate.Redis.RedisRateHandler({client: redis.createClient()})\n```\n\n  The rate handler that stores the routes for the rate. The built in handlers are for Redis (recommended) \n  and Memory (for testing or single webserver clusters - use new rate.Memory.MemoryRateHandler() ).\n\n- *interval*\n\n```js\n1\n```\n\n  The interval of time in *seconds* that the middleware tracks your route. For interval=1, it will track \n  the amount of requests hitting your route per 1 second. For value=10, it will track requests per 10 seconds.\n\n- *limit*\n\n```js\n0\n```\n\n  For any non-zero values of limit, rate-limiting will be turned on. For limit=10 and interval=1, the system\n  will only allow 10 requests per second for a specific requester on this specific route. \n  For limit=100 and interval=10, the system will allow 100 requests per 10 seconds for this specific requester on this specific route.\n\n\n- *getRemoteKey*\n\n```js\nfunction (req) {\n  return req.connection.remoteAddress;\n}\n```\n\n  A function that allows you to switch how rate identifies a specific requester. By default, it is their IP. You can override it with a function that sets it based on the authenticated user, or on a API key that the user is posting. See below in usage for an example. \n\n- *getRouteKey*\n\n```js\nfunction (req) {\n  return req.route.method + ':' + req.route.regexp;\n}\n```\n\n  A function that allows you to switch how rate identifies a route. By fefault, its the method:route_regex\n\n- *setHeaders*\n\n```js\ntrue\n```\n\n  Whether you want to set rate limiting headers or not.\n\n- *setHeadersHandler*\n\n```js\nfunction (req, res, rate, limit, resetTime) {\n\n    var remaining = limit - rate;\n    if (remaining < 0) {\n        remaining = 0;\n    }\n\n    // follows Twitter's rate limiting scheme and header notation\n    // https://dev.twitter.com/docs/rate-limiting/faq#info\n    res.setHeader('X-RateLimit-Limit', limit);\n    res.setHeader('X-RateLimit-Remaining', remaining);\n    res.setHeader('X-RateLimit-Reset', resetTime);\n}\n```\n\n  A function that is called to cutomize the request and its headers to give the requester an idea of how rate-limited it is.\n\n- *onLimitReached*\n\n```js\nfunction (req, res, rate, limit, resetTime, next) {\n            \n    // HTTP code 420 from http://mehack.com/inventing-a-http-response-code-aka-seriously\n    res.json({error: 'Rate limit exceeded. Check headers for limit information.'}, {status: 420});\n}\n```\n\n  A function that is called when a route's rate limit is reached. This will allow you to customize what you\n  return back to the requester when they can no longer have access to this route.\n\n\n\n## Usage\n\nBelow is code demonstrating use and customization of most of the use cases of rate:\n\n```js\n\nvar rate            = require('../lib/rate'),\n  redis     = require('redis'),\n  client      = redis.createClient();\n\nvar app = require('express').createServer();\n\n// create the rate redis handler\nvar redisHandler = new rate.Redis.RedisRateHandler({client: client});\n\n\n\n// \n// Monitor rate of a route\n//\n\n// options: handler is the mechanism where rate information is kept\n// interval is the interval on which we are listening for the rate. Here we're counting requests per 1 second.\n// If we switch interval to 10, then we are counting how many requests this route is handling per 10 seconds.\nvar simpleMiddleware = rate.middleware({handler: redisHandler, interval: 1});\n\n// apply the rate middleware to the / route\napp.get('/', simpleMiddleware, function(req, res, next){\n  res.send('I am being rate monitored at requests per 1 second.')\n});\n\n//\n// Monitor the rate of this route, and report the RPS of **everyone** hitting this route\n//\nvar monitorMiddleware1 = rate.middleware({handler: redisHandler, interval: 1});\n\n// apply the rate middleware to the / route\napp.get('/route-rate', monitorMiddleware1, function(req, res, next){\n  var rateKey = req.route.method + ':' + req.route.regexp;\n  redisHandler.getRate(rateKey, null, next, function (rate) {\n    res.send('This route is being requested at ' + rate + ' requests per 1 second.');\n  });\n});\n\n//\n// Monitor the rate of this route, and report the RPS of **only you** hitting this route\n//\nvar monitorMiddleware2 = rate.middleware({handler: redisHandler, interval: 1});\n\n// apply the rate middleware to the / route\napp.get('/me-rate', monitorMiddleware2, function(req, res, next){\n  var rateKey = req.route.method + ':' + req.route.regexp;\n  var remoteKey = req.connection.remoteAddress;\n  redisHandler.getRate(rateKey, remoteKey, next, function (rate) {\n    res.send(remoteKey + ' is requesting this route at ' + rate + ' requests per 1 second.');\n  });\n});\n\n//\n// Monitor and rate-limit this route\n//\n\n// this middleware will only allow 2 requests for every 4 seconds from a specific user\nvar limiterMiddleware = rate.middleware({handler: redisHandler, interval: 4, limit: 2});\n\napp.get('/limited', limiterMiddleware, function(req, res){\n  res.send('You can only request me twice every 4 seconds!');\n});\n\n\n// \n// Key requesters by their API key instead of IP\n//\n\nvar apiKeyMiddleware = rate.middleware(\n  {handler: redisHandler, \n   limit: 10,\n   interval: 2, \n   getRemoteKey: function (req) {\n    return req.params.api_key;\n   }\n});\n\napp.get('/api/:api_key/operation', apiKeyMiddleware, function(req, res){\n  res.send('API key ' + req.params.api_key + ' only has ' + res.getHeader('x-ratelimit-remaining') + ' remaining requests.');\n});\n\n// \n// Customize the headers sent back during rate limiting and the message returned\n//\n\nvar headersMiddleware = rate.middleware(\n  {handler: redisHandler, \n   limit: 5,\n   interval: 5, \n   setHeadersHandler: function (req, res, rate, limit, resetTime) {\n\n            var remaining = limit - rate;\n\n            if (remaining < 0) {\n                remaining = 0;\n            }\n\n            // follows Twitter's rate limiting scheme and header notation\n            // https://dev.twitter.com/docs/rate-limiting/faq#info\n            res.setHeader('X-RateLimit-Limit', limit);\n            res.setHeader('X-RateLimit-Remaining', remaining);\n            res.setHeader('X-RateLimit-Reset', resetTime);\n        },\n\n        onLimitReached: function (req, res, rate, limit, resetTime, next) {\n            \n            // HTTP code 420 from http://mehack.com/inventing-a-http-response-code-aka-seriously\n            res.json({error: 'Rate limit exceeded. Check headers for limit information.'}, {status: 420});\n        }\n});\n\napp.get('/headers', headersMiddleware, function(req, res){\n  var text = 'X-RateLimit-Limit :' + res.getHeader('X-RateLimit-Limit') + '              ' + \n    'X-RateLimit-Remaining :' + res.getHeader('X-RateLimit-Remaining') + '              ' + \n    'X-RateLimit-Reset :' + res.getHeader('X-RateLimit-Reset');\n  res.send(text);\n});\n\napp.listen(3000);\n\n```\n\n## TO-DOs\n\n  - Support multiple intervals\n  - Fix redis tests to work all together\n\n## Testing\n\nGet the testing requirements:\n\n    $ npm install expresso -g\n    $ npm install should\n\nGo to the root project directory and run:\n\n    $ make test\n\nNote: redis tests (/test/redis.tests.js) work seperately but not together.",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/ClassMetric/express-rate/issues"
  },
  "_id": "express-rate@0.0.1",
  "dist": {
    "shasum": "8055961ae462e462d03910abe93416ccce186e06"
  },
  "_from": "express-rate@",
  "_resolved": "https://registry.npmjs.org/express-rate/-/express-rate-0.0.1.tgz"
}
