{
  "name": "grunt-gettext",
  "description": "Gettext for JavaScript and Grunt.js",
  "version": "0.1.1",
  "homepage": "https://github.com/arendjr/grunt-gettext",
  "author": {
    "name": "Arend van Beelen",
    "email": "arendjr@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/arendjr/grunt-gettext.git"
  },
  "bugs": {
    "url": "https://github.com/arendjr/grunt-gettext/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/arendjr/grunt-gettext/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-gettext\n\n> Gettext for JavaScript and Grunt.js\n\n## Introduction\n\nGettext is the name of a set of utilities developed by GNU to add multi-language support to\napplications.\n\nThe first step of the translation process is to extract translatable messages from your sources.\nTo do so, you should mark all strings which you want to translate by wrapping them in a\ntranslator function (often called `tr()` or `i18n()`). The **xgettext** task provided by this\nplugin then scans all your source files and generates a POT file containing all the translatable\nstrings. In addition to scanning plain JavaScript files, this plugin also supports scanning\nHandlebars templates.\n\nThe second step is converting the POT file into a PO file which is the file that will be actually\ntranslated by translators. During this step you can merge the POT file with a previously\ntranslated PO file resulting in a new PO file that has all known translations already filled in.\nThis step can be performed using the `msgmerge` command-line utility. It is not provided by this\nplugin, but an example of calling the utility through the Grunt Shell plugin is given below as\npart of the real-world example.\n\nThe third step is taking the translated PO files and getting the translations to show up in your\nproject. In order to facilitate this, this plugin provides the **po2json** task which converts the\ntranslations to a JSON map, optionally wrapped in a Require.js definition. To finish this step,\nyou will have to make sure the JSON translations are loaded into your application and actually\nused by the `tr()` or `i18n()` function you use.\n\nHappy translating!\n\n---\n\nTo find more information about the original gettext utilities, visit the GNU project:\nhttp://www.gnu.org/software/gettext/\n\nGNU also maintains a list of additional tools to work with PO files, including translation\nprograms useful for translators:\nhttp://www.gnu.org/software/trans-coord/manual/web-trans/html_node/PO-Files.html\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the\n[Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once\nyou're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-gettext --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of\nJavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-gettext');\n```\n\n\n## The \"xgettext\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `xgettext` to the data object passed into\n`grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  xgettext: {\n    options: {\n      functionName: \"tr\",\n      potFile: \"messages.pot\",\n      //processMessage: function(message) { ... }\n    },\n    target: {\n      files: {\n        handlebars: [],\n        javascript: []\n      }\n    }\n  },\n})\n```\n\n### Options\n\n#### options.functionName\nType: `String`\nDefault value: `\"tr\"`\n\nThe function name that marks translatable messages.\n\n#### options.potFile\nType: `String`\nDefault value: `\"messages.pot\"`\n\nThe .pot file that is generated by this task (the output file). It will contain all extracted\nmessages, regardless of the source in which they were found (be it Handlebars or JavaScript files).\n\n**Warning:** This file is overwritten every time you run this task.\n\n#### options.processMessage\nType: `Function`\nDefault value: `_.identity`\n\nCustom function that will process every extracted message before it's included in the POT file. This\nmay come in handy, for example, if you want to simplify whitespace.\n\nThe function takes the message string as its sole argument and should return the processed message.\n\n### Files\n\n#### files.handlebars\n\nHandlebars files to scan for translatable messages.\n\nAssuming the default functionName is used, translatable messages look like this:\n\n    {{tr \"Some translatable message\"}}\n\n    {{tr \"You have %1 followers\" numFollowers}}\n\nIn either case, the first string argument is extracted as a translatable message.\n\n#### files.javascript\n\nJavaScript files to scan for translatable texts.\n\nAssuming the default functionName is used, translatable messages look like this:\n\n    tr(\"Some translatable messages\")\n\n    tr(\"You have %1 follower\", \"You have %1 followers\").arg(numFollowers)\n\nIn both cases, all string arguments inside the tr() function call are extracted as translatable\nmessages.\n\nBe aware that concatenating translatable strings with variables is inherently not\npossible. For example, this will __NOT__ work:\n\n    tr(\"Some value: \" + value)\n\nThe reason this fails is because the input to the tr() function will be different every time\nit is called, and therefore does not have a stable key for looking up the proper translation.\n\nNote that concatenating multiple strings to create a single (multi-line) translatable string\n_does_ work, provided all parts use the same type of quotes. Example:\n\n    tr(\"This is the first line \" +\n       \"of a multiline translatable message\")\n\n\n## The \"po2json\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `po2json` to the data object passed into\n`grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  xgettext: {\n    options: {\n      requireJs: false\n    },\n    your_target: {\n      // target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.requireJs\nType: `Boolean`\nDefault value: `false`\n\nIf set to true, the JSON resource is wrapped in an anonymouse Require.js definition.\n\n### Usage Examples\n\n#### Real-world example\n\n```js\nvar _ = grunt.util._;\n\nvar locales = [\"de-DE\", \"en-GB\", \"en-US\", \"fr-FR\", \"it-IT\", \"ja-JP\", \"nl-NL\"];\n\ngrunt.initConfig({\n  xgettext: {\n    target: {\n      files: {\n        handlebars: [\"tmpl/**.handlebars\"],\n        javascript: [\"js/**.js\"]\n      },\n      options: {\n        functionName: \"i18n\",\n        potFile: \"translations/messages.pot\",\n        processMessage: function(message) {\n          return message.replace(/\\s+/g, \" \"); // simplify whitespace\n        }\n      }\n    }\n  },\n\n  po2json: {\n    target: {\n      files: _.object(\n          _.map(locales, function(locale) { return \"translations/\" + locale + \".js\"; }),\n          _.map(locales, function(locale) { return \"translations/\" + locale + \".po\"; })\n        )\n      },\n      options: {\n        requireJs: true\n      }\n    }\n  },\n  \n  shell: {\n    options: {\n      failOnError: true\n    },\n    msgmerge: {\n      command: _.map(locales, function(locale) {\n        var po = \"translations/\" + locale + \".po\";\n        return \"if [ -f \\\"\" + po + \"\\\" ]; then\\n\" +\n               \"    echo \\\"Updating \" + po + \"\\\"\\n\" +\n               \"    msgmerge \" + po + \" translations/messages.pot > .new.po.tmp\\n\" +\n               \"    exitCode=$?\\n\" +\n               \"    if [ $exitCode -ne 0 ]; then\\n\" +\n               \"        echo \\\"Msgmerge failed with exit code $?\\\"\\n\" +\n               \"        exit $exitCode\\n\" +\n               \"    fi\\n\" +\n               \"    mv .new.po.tmp \" + po + \"\\n\" +\n               \"fi\\n\";\n      }).join(\"\")\n    }\n  }\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for\nany new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-gettext@0.1.1",
  "dist": {
    "shasum": "b75670db9819175d4a0520c59cb1df968bfe0dc7"
  },
  "_from": "grunt-gettext@",
  "_resolved": "https://registry.npmjs.org/grunt-gettext/-/grunt-gettext-0.1.1.tgz"
}
