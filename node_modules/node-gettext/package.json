{
  "name": "node-gettext",
  "description": "Gettext client for Node.js to use .mo files for I18N",
  "version": "0.2.14",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/node-gettext",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/node-gettext.git"
  },
  "scripts": {
    "test": "nodeunit test/"
  },
  "main": "./index",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/node-gettext/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "iconv": ">=1.2.0"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "engine": {
    "node": ">=0.6"
  },
  "keywords": [
    "i18n",
    "l10n",
    "gettext",
    "mo"
  ],
  "readme": "# node-gettext\n\n**node-gettext** is a Node.JS module to use .MO and .PO files.\n\n## Features\n\n  * Load binary *MO* or source *PO* files\n  * Supports contexts and plurals\n  * Add your own translations to the list\n  * Recompile current translation table into a *MO* or a *PO* file!\n\n[![Build Status](https://secure.travis-ci.org/andris9/node-gettext.png)](http://travis-ci.org/andris9/node-gettext)\n\n## Support node-gettext development\n\n[![Donate to author](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=DB26KWR2BQX5W)\n\n## Installation\n\n    npm install node-gettext\n\n## Usage\n\n### Create a new Gettext object\n\n    var Gettext = require(\"node-gettext\");\n\n    var gt = new Gettext();\n    \n### Add a language\n\n*addTextdomain(domain, file)*\n\nLanguage data needs to be in the Buffer format - it can be either contents of a *MO* or *PO* file.\n\n*addTextdomain(domain[, fileContents])*\n\nLoad from a *MO* file\n\n    var fileContents = fs.readFileSync(\"et.mo\");\n    gt.addTextdomain(\"et\", fileContents);\n\nor load from a *PO* file\n\n    var fileContents = fs.readFileSync(\"et.po\");\n    gt.addTextdomain(\"et\", fileContents);\n\nIf you do not include the file contents, then a blank language template object\nis created which can be edited with *setTranslation*, *deleteTranslation* methods etc.\n\nPlural rules are automatically detected from the language code\n\n    gt.addTextdomain(\"et\");\n    gt.setTranslation(\"et\", false, \"hello!\", \"tere!\");\n\n### Check or change default language\n\n*textdomain(domain)*\n\n    gt.textdomain(\"et\");\n\nThe function also returns the current texdomain value\n\n    var curlang = gt.textdomain();\n\n## Translation methods\n\n### Load a string from default language file\n\n*gettext(msgid)*\n\n    var greeting = gt.gettext(\"Hello!\");\n    \n### Load a string from a specific language file\n\n*dgettext(domain, msgid)*\n\n    var greeting = gt.dgettext(\"et\", \"Hello!\");\n    \n### Load a plural string from default language file\n\n*ngettext(msgid, msgid_plural, count)*\n\n    gt.ngettext(\"%d Comment\", \"%d Comments\", 10);\n\n### Load a plural string from a specific language file\n\n*dngettext(domain, msgid, msgid_plural, count)*\n\n    gt.dngettext(\"et\", \"%d Comment\", \"%d Comments\", 10)\n    \n### Load a string of a specific context\n\n*pgettext(msgctxt, msgid)*\n\n    gt.pgettext(\"menu items\", \"File\");\n\n### Load a string of a specific context from specific language file\n\n*dpgettext(domain, msgctxt, msgid)*\n\n    gt.dpgettext(\"et\", \"menu items\", \"File\");\n    \n### Load a plural string of a specific context\n\n*npgettext(msgctxt, msgid, msgid_plural, count)*\n\n    gt.npgettext(\"menu items\", \"%d Recent File\", \"%d Recent Files\", 3);\n    \n### Load a plural string of a specific context from specific language file\n\n*dnpgettext(domain, msgctxt, msgid, msgid_plural, count)*\n\n    gt.dnpgettext(\"et\", \"menu items\", \"%d Recent File\", \"%d Recent Files\", 3);\n\n### Get comments for a translation (if loaded from PO)\n\n*getComment(domain, msgctxt, msgid)*\n\n    gt.getComment(\"et\", \"menu items\", \"%d Recent File\");\n\nReturns an object in the form of `{comment: \"\", code: \"\", note: \"\"}`\n\n### Sets a comments for a translation\n\n*setComment(domain, msgctxt, msgid, comment)*\n\n    gt.getComment(\"et\", \"menu items\", \"%d Recent File\", \"This is a comment\");\n\n`comment` can either be a string or an object with the following properties: `{comment: \"\", code: \"\", note: \"\"}`.\n\n## String helpers\n\nIn order to make things really easy, it is possible to attach the gettext functions directly to string\nprototypes with `gettext.registerStringHelpers()`\n\nExample:\n\n    // setup gettext\n    var gettext = new Gettext();\n    gettext.registerStringHelpers();\n    gettext.addTextdomain(\"et\", fs.readFileSync(\"et.mo\"));\n\n    // translate any string\n    var translated = \"translate this string\".gettext();\n    // or\n    var plural = \"translate %s string\".ngettext(\"translate %s strings\", 10);\n\n    // you can even change the default textdomain\n    \"\".textdomain(\"en\");\n\nThe parameters for the gettext functions are the same as with regular gettext methods, except that the `msgid` parameter is not needed.\n\n## Manage translations\n\n### Add a translation\n\n*setTranslation(domain, context, msgid, translation)*\n\n    gt.setTranslation(\"et\", \"\", \"Hello\", \"Tere\");\n\nUse an array for plurals\n\n    gt.setTranslation(\"et\", \"\", \"%s comments\", [\"%s kommentaar\", \"%s kommentaari\"]);\n\n### Remove a translation\n\n*deleteTranslation(domain, context, msgid)*\n\n    gt.deleteTranslation(\"et\", \"\", \"Hello\");\n\n### List available contexts\n\n*listContextNames([domain])*\n\n    var contextStrArr = gt.listContextNames(\"et\");\n\n### List translation keys for a context\n\n*listKeys([domain], [context])*\n\n    var originalsStrArr = gt.listKeys(\"et\", \"\");\n\n## Compiling\n\n### Compile to MO\n\nCompile current translation table to a *MO* file\n\n*compileMO([domain])*\n\n    fs.writeFile(\"out.mo\", gt.compileMO(\"et\")); \n\n### Compile to PO\n\nCompile current translation table to a *PO* file\n\n*compilePO([domain])*\n\n    fs.writeFile(\"out.po\", gt.compilePO(\"et\"));\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/node-gettext/issues"
  },
  "_id": "node-gettext@0.2.14",
  "dist": {
    "shasum": "f16cdc493563783eab4182b9b71b46e5d6974308"
  },
  "_from": "node-gettext@",
  "_resolved": "https://registry.npmjs.org/node-gettext/-/node-gettext-0.2.14.tgz"
}
